
первое задание:
> Подумать над выбором предметной области для выполнения финальной
> (экзаменационной) работы. Выбирайте предметную область, которая вам интересна
> и в которой вы разбираетесь или хотите разобраться.
> Сделать краткое описание выбранной предметной области (1-2 страницы). Если
> описание получится более объемным, не беда. Ведь это описание затем войдет
> в финальный отчет.
> Попытаться сформулировать требования к будущей базе данных (можно опираться
> на вводную лекцию). Все презентации лекций находятся здесь:
> https://postgrespro.ru/education/university/sqlprimer
> Фактически, в первой работе нужно выполнить следующие стадии проектирования
> базы данных:
> • Планирование БД
> • Определение системы
> • Сбор и анализ требований
> См. раздел 0.6 "Жизненный цикл разработки системы с базой данных" во вводной
> лекции.
> Планирование БД -- это краткое описание тех преимуществ, которые даст компании
> реализация базы данных, какие проблемы позволит решить эта база данных, что она
> позволит улучшить в плане обработки данных и т.д.
> Определение системы и Сбор и анализ требований можно объединить в один этап.
> Конечно, прикладывать формы документов, как это сделано в лекции, не нужно
> (все-таки это небольшая работа, а не курсовой проект). Напишите требования
> к данным, требования к транзакциям, т. е. наиболее типичные (вероятные) запросы,
> которые может пожелать выполнить пользователь. Пусть этих запросов будет
> не 20 штук, а буквально 4-5, самых важных. Эти запросы на данном этапе пишутся
> не на языке SQL, а на русском языке. Примеры того, как сформулировать требования
> к данным и к транзакциям, есть во вводной лекции (см. слайды 97-106).
> В результате у вас должно получиться:
> -- краткое описание выбранной предметной области в виде связного рассказа;
> -- краткое описание тех преимуществ, которые даст компании или пользователю
> реализация базы данных, какие проблемы позволит решить эта база данных (это
> буквально один абзац);
> -- требования к данным и транзакциям, наиболее типичные запросы пользователя
> к базе данных, которые должны обеспечить пользователя полезной информацией.
> Если вы смешаете в один блок требования к транзакциям и типичные запросы
> пользователя к БД, это вполне допустимо.



Задача
> ФИНАЛЬНОЕ ЗАДАНИЕ
> ====================================
> 1. Спроектировать базу данных для выбранной предметной области.
> Самые первые этапы разработки вы выполните в первом задании (см. выше).
> А в финальном задании выполняете остальные этапы.
> При этом нужно следовать общей методологии проектирования баз данных: сначала
> необходимо создать концептуальную модель данных с использованием ER-диаграмм,
> затем построить логическую модель, выполнив отображение сущностей и связей
> в отношения, в завершение нужно выполнить физическое проектирование, создав
> реляционные таблицы в среде целевой СУБД PostgreSQL. Можно использовать
> ту нотацию, которая вам больше нравится: П. Чена, "вороньи лапки"
> или UML-нотацию, как в лекции и в учебнике Т. Коннолли. Для рисования диаграмм
> можно использовать любой бесплатный редактор, умеющий рисовать ER-диаграммы.
> Можно нарисовать их в Word'е или аккуратно от руки (и сфотографировать).
>
> Число таблиц должно быть равно 8-10.
>
> Почему дается интервал (8-10)? Потому что число таблиц может быть 8, а не 10,
> но при этом могут использоваться более разнообразные типы данных и может быть
> больше столбцов в таблицах.
>
> Обязательно должны быть созданы триггеры (и триггерные функции к ним)
> и хранимые функции (процедуры) на языке PL/pgSQL.
>
> Число триггеров должно быть не менее 2.
> Число хранимых функций должно быть не менее 2.
>
> Эти функции и триггеры не обязательно должны быть сложными. Цель -- научиться
> их применять с пользой для дела.
>
> 2. Ввести небольшое количество записей в таблицы базы данных, чтобы можно было
> продемонстрировать типичные запросы к базе данных. В запросах должны быть
> использованы:
> -- подзапросы;
> -- общие табличные выражения (CTE) (хотя бы одно) и
> -- оконные функции (Window functions) (хотя бы одна).
>
> 3. Создавать приложение (интерфейс пользователя) не требуется.
> Конечно, создать его не запрещается, но это не означает, что при отсутствии
> интерфейса пользователя оценка будет снижена, а при его наличии повышена.
> Мотивом для его создания может быть стремление к совершенству, желание превратить
> эту учебную разработку в полноценный продукт и т. д.
> В том случае, если приложение не разрабатывалось, нужно заранее подготовить
> несколько типичных запросов к базе данных и сохранить их в отдельных текстовых
> файлах. Для демонстрации этих запросов их можно вызывать как извне утилиты psql,
> так и изнутри нее. Например, для выполнения запроса, содержащегося в файле
> file_with_request.sql, нужно сделать так:
>
> psql -d your_database -f file_with_request.sql -U postgres
>
> Для выполнения запроса, сохраненного в файле, изнутри утилиты psql, можно
> сделать так (конечно, нужно учитывать, в каком каталоге находится этот файл,
> возможно, будет удобнее и проще написать полный путь к файлу):
>
> \i file_with_request.sql
>
> 4. Подготовить отчет.
> Нужно поместить в него:
> -- краткое описание предметной области и требования к базе данных
> (т. е. результат выполнения самого первого домашнего задания);
> -- концептуальную, логическую и физическую схемы базы данных;
> -- типичные запросы к базе данных, сохраненные в виде отдельных текстовых файлов;
> -- резервную копию базы данных, созданную с помощью утилиты pg_dump, входящей
> в состав PostgreSQL. С помощью этой копии можно будет быстро восстановить вашу
> базу данных и те данные, которые вы в нее ввели.
> Краткое описание предметной области, концептуальную и логическую схемы базы
> данных нужно поместить в документ в формате doc или pdf (как вам удобнее).
> Физическую схему базы данных нужно представить в отчете в виде текстового
> файла, содержащего SQL-команды для создания таблиц, представлений (если они
> используются), триггеров и триггерных функций. В этом файле должны быть сделаны
> комментарии. Имея такой файл, создать все объекты базы данных можно будет таким
> образом:
>
> psql -d your_database -f file_with_SQL_commands.sql -U postgres
>
> В качестве примера такого файла можно посмотреть файл adj_list.sql
> в каталоге /home/WORK/Databases/Admin_DB/UTF-8.
> Для каждого отношения (таблицы) необходимо указать номер нормальной формы,
> в которой это отношение находится, и кратко (буквально, в два слова) обосновать,
> из чего это следует. Если какое-либо отношение не находится хотя бы в 3НФ,
> необходимо обосновать, почему принято такое проектное решение.
>
> ==========================================================================
> Я прикрепил к письму примеры выполнения финального задания.
> Конечно, не нужно бездумно копировать их. Нужно постараться сделать лучше.
> ==========================================================================
>
> ====================================================================
> ЗАЧЕТ
> ====================================================================
> 1. Демонстрация работы с вашей базой данных путем выполнения SQL-запросов,
> заранее сохраненных в текстовых файлах, сопровождаемая устными пояснениями
> студента о порядке их выполнения, смысле выводимых результатов, особенностях
> конкретных SQL-команд.
> 2. Ответы на теоретические вопросы, связанные с темой вашей работы.
> 3. Предоставление отчета.